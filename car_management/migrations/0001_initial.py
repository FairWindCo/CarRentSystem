# Generated by Django 3.2.6 on 2022-01-31 18:29

import audit_log.models.fields
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('balance', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Car',
            fields=[
                ('account_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='balance.account')),
                ('date_start', models.DateField(auto_created=True, auto_now_add=True)),
                ('year', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(2100), django.core.validators.MinValueValidator(1900)], verbose_name='Год выпуска')),
                ('mileage_at_start', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Пробег при поступлении')),
                ('control_mileage', models.PositiveIntegerField(verbose_name='Контрольное значение пробега')),
                ('last_TO_date', models.DateField(blank=True, null=True)),
                ('wialon_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='ID в системе WIALON')),
                ('fuel_consumption', models.FloatField(default=14, verbose_name='Расход топлива')),
                ('signal', models.CharField(default='', max_length=6, verbose_name='Позывной')),
            ],
            options={
                'verbose_name': 'Авто',
                'verbose_name_plural': 'Авто',
            },
            bases=('balance.account',),
        ),
        migrations.CreateModel(
            name='CarBrand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, verbose_name='Бренд')),
            ],
            options={
                'verbose_name': 'Бренд',
                'verbose_name_plural': 'Бренды',
            },
        ),
        migrations.CreateModel(
            name='Counterpart',
            fields=[
                ('account_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='balance.account')),
            ],
            options={
                'verbose_name': 'Контрагент',
                'verbose_name_plural': 'Контрагенты',
            },
            bases=('balance.account',),
        ),
        migrations.CreateModel(
            name='ExpensesTypes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('type_class', models.PositiveSmallIntegerField(choices=[(1, 'Затраты на автомобиль'), (2, 'Капитальные затраты на автомобиль'), (3, 'Страховые случаи'), (100, 'Прочее')], default=100, verbose_name='Класс затрат')),
            ],
            options={
                'verbose_name': 'Тип затрат',
                'verbose_name_plural': 'Типы затрат',
            },
        ),
        migrations.CreateModel(
            name='InvestmentCarBalance',
            fields=[
                ('account_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='balance.account')),
                ('create_date', models.DateField(auto_created=True)),
            ],
            options={
                'verbose_name': 'Инвестор',
                'verbose_name_plural': 'Инвесторы',
            },
            bases=('balance.account',),
        ),
        migrations.CreateModel(
            name='Investor',
            fields=[
                ('account_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='balance.account')),
                ('profit', models.FloatField(default=50, verbose_name='Коифициент распределения прибыли')),
                ('operating_costs_percent', models.FloatField(default=5.0, verbose_name='Процент на операционные затраты')),
            ],
            options={
                'verbose_name': 'Инвестор',
                'verbose_name_plural': 'Инвесторы',
            },
            bases=('balance.account',),
        ),
        migrations.CreateModel(
            name='RentTerms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название пакета условий')),
                ('profit', models.FloatField(default=50, verbose_name='Процент распределения прибыли')),
                ('fuel_compensation', models.FloatField(default=100, verbose_name='Процент компенсации топлива')),
                ('additional_millage', models.PositiveIntegerField(default=4, verbose_name='Дополнительный километраж на поездку')),
                ('min_trips', models.PositiveIntegerField(default=3, verbose_name='Минимальное количество поездок')),
                ('max_millage', models.PositiveIntegerField(default=2000, verbose_name='Макс км за интервал')),
                ('plan_amount', models.FloatField(default=2500, verbose_name='План по кассе')),
                ('trips_control', models.BooleanField(default=True, verbose_name='Контроль за количеством поездок')),
                ('millage_control', models.BooleanField(default=True, verbose_name='Контроль за километражем')),
                ('amount_control', models.BooleanField(default=False, verbose_name='Контроль за суммой кассы')),
                ('type_class', models.PositiveSmallIntegerField(choices=[(1, 'Учет в часах'), (2, 'Учет в днях'), (3, 'Учет в неделях'), (4, 'Учет в месяцах')], default=2, verbose_name='Тип учета')),
                ('control_interval', models.PositiveIntegerField(default=7, verbose_name='Контрольный интервал')),
                ('control_interval_paid_distance', models.PositiveIntegerField(default=1, verbose_name='Оплата за интервал')),
                ('replaced_by_new', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='car_management.rentterms')),
            ],
            options={
                'verbose_name': 'Условия аренды',
                'verbose_name_plural': 'Условия аренды',
            },
        ),
        migrations.CreateModel(
            name='RentPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название тарифа')),
                ('type_class', models.PositiveSmallIntegerField(choices=[(1, 'Учет в часах'), (2, 'Учет в днях'), (3, 'Учет в неделях'), (4, 'Учет в месяцах')], default=2, verbose_name='Тип учета')),
                ('price', models.FloatField(default=600, verbose_name='Цена оренды в единицу времени')),
                ('min_time', models.PositiveIntegerField(default=3, verbose_name='Минимальный срок аренды')),
                ('safe_time', models.PositiveIntegerField(default=7, verbose_name='Срок аренды для расчета стоимости залога')),
                ('can_break_rent', models.BooleanField(default=True, verbose_name='Разрешен досочный возврат')),
                ('trip_many_paid', models.BooleanField(default=False, verbose_name='Проведение оплат по поездкам')),
                ('replaced_by_new', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='car_management.rentprice')),
            ],
            options={
                'verbose_name': 'Тариф аренды',
                'verbose_name_plural': 'Тарифы аренды',
            },
        ),
        migrations.CreateModel(
            name='Expenses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_mark', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('amount', models.FloatField(verbose_name='')),
                ('franchise', models.FloatField(default=0, verbose_name='Франшиза')),
                ('description', models.TextField()),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='account_expenses', to='balance.account')),
                ('counterpart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='counterpart_expenses', to='car_management.counterpart')),
                ('created_by', audit_log.models.fields.CreatingUserField(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_expenses', to=settings.AUTH_USER_MODEL)),
                ('expenseType', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='car_management.expensestypes')),
                ('transaction', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='expense', to='balance.transaction')),
            ],
            options={
                'verbose_name': 'Затрата',
                'verbose_name_plural': 'Затраты',
            },
        ),
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('account_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='balance.account')),
                ('phone', models.CharField(blank=True, default='Телефон', max_length=15, null=True)),
                ('default_terms', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='drivers_terms', to='car_management.rentterms', verbose_name='Условия по умолчанию')),
            ],
            options={
                'verbose_name': 'Водитель',
                'verbose_name_plural': 'Водители',
            },
            bases=('balance.account',),
        ),
        migrations.CreateModel(
            name='CarModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, verbose_name='Модель')),
                ('type_class', models.PositiveSmallIntegerField(choices=[(1, 'Бензин А95'), (2, 'Бензин А95'), (3, 'Дизельное топливо'), (4, 'Сжиженный газ')], default=4, verbose_name='Тип топлива')),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='car_management.carbrand')),
            ],
            options={
                'verbose_name': 'Модель',
                'verbose_name_plural': 'Модели',
            },
        ),
        migrations.CreateModel(
            name='CarMileage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stat_date', models.DateField(default=datetime.datetime(2022, 1, 31, 18, 29, 51, 840142, tzinfo=utc), verbose_name='Дата')),
                ('mileage_at_start', models.PositiveIntegerField(verbose_name='')),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mileage', to='car_management.car')),
            ],
        ),
        migrations.CreateModel(
            name='CarInsurance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(auto_created=True, verbose_name='Дата начала')),
                ('end_date', models.DateField(verbose_name='Дата завершения')),
                ('car_amount', models.FloatField(default=0, verbose_name='Страховой взнос')),
                ('franchise', models.PositiveIntegerField(default=0, verbose_name='Франшиза')),
                ('is_capital_expense', models.BooleanField(default=0, verbose_name='Покрытие капитальных затрат')),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='car_management.car', verbose_name='Машина')),
                ('created_by', audit_log.models.fields.CreatingUserField(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_insurance', to=settings.AUTH_USER_MODEL)),
                ('insurer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='car_management.counterpart', verbose_name='Страховщик')),
            ],
            options={
                'verbose_name': 'Страховка',
                'verbose_name_plural': 'Страховки',
                'ordering': ['-start_date', '-end_date', 'insurer__name', 'car__name'],
            },
        ),
        migrations.AddField(
            model_name='car',
            name='car_investor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cars', to='car_management.investor'),
        ),
        migrations.AddField(
            model_name='car',
            name='investment',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='car', to='car_management.investmentcarbalance'),
        ),
        migrations.AddField(
            model_name='car',
            name='model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='car_management.carmodel'),
        ),
        migrations.AddField(
            model_name='car',
            name='rent_price_plan',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rent_price_cars', to='car_management.rentprice'),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='balance.account')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Профиль пользователя',
                'verbose_name_plural': 'Провили пользователя',
                'unique_together': {('user', 'account')},
            },
        ),
    ]
